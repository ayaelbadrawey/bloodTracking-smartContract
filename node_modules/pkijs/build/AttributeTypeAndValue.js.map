{"version":3,"sources":["../src/AttributeTypeAndValue.js"],"names":["AttributeTypeAndValue","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","typeValue","toSchema","toJSON","_object","Object","keys","length","isEqual","compareTo","Utf8String","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeTypeAndValue ::= Sequence {\r\n\t *    type     AttributeType,\r\n\t *    value    AttributeValue }\r\n\t *\r\n\t * AttributeType ::= OBJECT IDENTIFIER\r\n\t *\r\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof AttributeTypeAndValue)\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\tif(((this.value instanceof asn1js.Utf8String) && (compareTo.value instanceof asn1js.Utf8String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.BmpString) && (compareTo.value instanceof asn1js.BmpString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.UniversalString) && (compareTo.value instanceof asn1js.UniversalString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.NumericString) && (compareTo.value instanceof asn1js.NumericString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.PrintableString) && (compareTo.value instanceof asn1js.PrintableString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.TeletexString) && (compareTo.value instanceof asn1js.TeletexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VideotexString) && (compareTo.value instanceof asn1js.VideotexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.IA5String) && (compareTo.value instanceof asn1js.IA5String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GraphicString) && (compareTo.value instanceof asn1js.GraphicString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VisibleString) && (compareTo.value instanceof asn1js.VisibleString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GeneralString) && (compareTo.value instanceof asn1js.GeneralString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.CharacterString) && (compareTo.value instanceof asn1js.CharacterString)))\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\t\t\t\t\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"AttributeTypeAndValue.js"}